""""The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from math import sqrt
import time

MAX_SEARCH = 2000000
DIVISORS_TH = 500


def gen_nth_traingle_number(n):
    if n == 1:
        return 1
    return int((n+1)/2*n)


def generate_sieve(n):
    sieve = [x for x in range(0, n)]
    sieve[1] = 0
    for x in range(2, n - 1):
        if sieve[x] != 0:
            for j in range(x ** 2, n, x):
                sieve[j] = 0
    sieve = list(filter(lambda x: x != 0, sieve))
    return sieve


def count_dividers(number):
    dividers_count = 1
    for x in range(1, int(sqrt(number))+1):
        if number % x == 0:
            if number/x == x:
                dividers_count += 1
            else:
                dividers_count += 2
    return dividers_count


def count_dividers_2(number):
    if number == 1:
        return 1
    ans = 1
    for prime in sieve:
        k = 1
        while number % prime == 0:
            k += 1
            number /= prime
        ans *= k
        if prime > number:
            break
    return ans


sieve = generate_sieve(gen_nth_traingle_number(10000))
print(count_dividers(76576500))
print(count_dividers(28))

# t = time.process_time()
# for i in range(1, MAX_SEARCH):
#     tr_n = gen_nth_traingle_number(i)
#     divisors_n = count_dividers(tr_n)
#     if divisors_n > DIVISORS_TH:
#         print(i, tr_n, divisors_n)
#         break
# print("TIME: {} s".format(time.process_time() - t))
print()